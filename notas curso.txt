#instalar next  automatica:
     CLI - yarn create-next-app
#instalar next  manual(recomendado):
    - npm init -y //crea package.json lo necesitamos para instalar los packetes que usaremos
    - yarn add next react react-dom //decimos a yarn que agregue estas dependencias
    - si  no tengo yarn npm install --global yarn
    - agregar scripts en package.json
        "dev": "next",
        "build": "next build", //build produccion
        "start": "next start" //servidor node para produccion
    -que pasa si ejecuto yarn start? sale un error por que primero se debe correr yar dev pero dice Couldn't find a `pages` directory. Please create one under the project root entonces creamos pages
    -ya estamos usando next si vamos a http://localhost:3000 sale un 404 pero es por que aun no tenemos index en pages pero ya esta listo
#Routing
    Basado en file system(dependera de lo que pongamos en pages)
        -   todo lo que se conoce como paginas y navegacion se entiende como routing y en next ya tenemos una solucion para no preocuparnos por eso basicamente existen 2 formas de routing en next:
        1. rutas estaticas: /about/
            -   agregamos primera ruta estatica o base index.js y vemos que next soporta hot reloading y fast refresh
            -   creo una pagina mas y le pongo About y automaticamente ahora si escribo  http://localhost:3000/About ya puedo navegar a about sensible a mayusculas

        2. rutas dinamicas: /user/dani , /user/sofi
            se crea una carpeta por ejemplo producto/mouse produto/teclado la carpeta seria producto y lo que viene despues es una variable entonces dentro de producto creo un archivo con esta notacion [id].js donde id es la variable en este caso teclado y mouse
            - para capturar ese valor se usa un hoock que es useRouter de next/router
#Under the hood (optimizaciones)
    utilizaremos yarn build y start para ver como se comporta next en produccion:
    1. build: en la salida en consola se ve que next hizo varias optimizaciones como code splitting que es hacer chunks o pedacitos de codigo js para cargar en la pagina solo lo que sea necesario y todo esto sin ninguna configuracion en webpack ni en ningun lado lo podemos verificar haciendo start y viendo en devtools en network y vemos que ademas a esos trozos de js les asigna un hash para administrar el cache del navegador 
    2. prerendering(SSR server side rendering) de las paginas: se puede verificar si vamos a alguna de las paginas en el navegador despues de hacer start y en devtools en network en response formateamos con el simbolo en barra inferior {} y en el primer response vemos que a viene el html con el contenido osea que se esta haciendo el renderizado en el servidor y no en el navegador lo que aporta al SEO search engine optimization optimizacion para buscadores, com ya todo viene prerenderizado es mucho mas eficiente para todos los dispositivos y motores de busqueda

#Enlazando Paginas 
    1. creamos barra de navegacioninicialmente con anchor pero notamos que al hacer click se refresca la pagina es decir como que hace peticion al servidor osea un routing por servidor que eso ya no se debe hacer entonces usamos Link de next/link y ya quedo un routing  en client side que es una SPA
    2. Link tiene otra optimizacion y es que hace prefetching  automarico cuando hago hover sobre link lo podemos ver en devtools corriendo build y en network 

#creando API con Next
    1. los endpoints se hacen con rutas asi como antes. creamos en pages una carpeta que se llama api(esto es por convencion).
    2. para hacer la seleccion de un solo aguacate debemos usar una ruta dinamica
    3. DEBUG con nextjs en package.json cambio el script a "dev": " NODE_OPTIONS='--inspect' next" luego apago la app y la corro de nuevo y voy a about:inspect en una ventana de google, doy click en inspect y se abre devtools
#consumiendo api desde un componente y pintandolo en el dom 
    1. usando fetch para hacer un request a mi api